"""
-----------------------------------------------------------------------------------------------
Título: TPO Entrega 1
Fecha:  03/06/2025
Autor:  Grupo 04

Descripción:

Pendientes:
-----------------------------------------------------------------------------------------------
"""

#----------------------------------------------------------------------------------------------
# MÓDULOS
#----------------------------------------------------------------------------------------------
from datetime import datetime

#----------------------------------------------------------------------------------------------
# FUNCIONES
#----------------------------------------------------------------------------------------------
# FUNCIONES PARA GESTIONAR ALUMNOS
def ingresoAlumno(alumnos):
    print("---------------------------")
    print("Ingreso de nuevo Alumno")
    print("---------------------------")

    nombre = input("Nombre: ").strip()
    apellido = input("Apellido: ").strip()
    direccion = input("Dirección: ").strip()
    email = input("Email: ").strip()
    carrera = input("Carrera de estudio: ").strip()
    telefono1 = input("Telefono 1: ").strip()
    telefono2 = input("Telefono 2: ").strip()
    telefono3 = input("Telefono 3: ").strip()

    if not alumnos:
        nuevo_id = "A0001"
    else:
        ultimo_id = alumnos[-1]["IdAlumno"]
        numero = int(ultimo_id[1:]) + 1
        nuevo_id = f"A{numero:04d}"

    alumno = {
        "IdAlumno": nuevo_id,
        "activo": True,
        "nombre": nombre,
        "apellido": apellido,
        "direccion": direccion,
        "email": email,
        "carrera": carrera,
        "telefono1": telefono1,
        "telefono2": telefono2,
        "telefono3": telefono3
    }

    alumnos.append(alumno)
    print(f"\n El alumno {nombre} {apellido} (ID: {nuevo_id}) fue agregado con éxito.\n")

def modificar_alumno(id_alumno, nuevos_datos): #2
    for alumno in alumnos:
        if alumno["IdAlumno"] == id_alumno:
            alumno.update(nuevos_datos)
            print(f"Alumno {id_alumno} modificado exitosamente.")
            return
    print(f"Alumno {id_alumno} no encontrado.")

def eliminarAlumno(_alumnos): #3 COMPLETADO
    """
    Da de baja lógicamente a un alumno si existe y está activo.
    Pide el ID hasta que sea un entero válido dentro del rango permitido (1000-9999).
    """
    while True:
        legajo = input("Ingrese el ID del alumno a eliminar (entre 1000 y 9999): ")
        print()

        if not legajo.isdigit():
            print("Error: Debe ingresar un número entero.")
            continue

        legajo_int = int(legajo)
        if legajo_int < 1000 or legajo_int > 9999:
            print("El ID ingresado está fuera del rango válido (1000 a 9999).")
            continue

        legajo = str(legajo_int)
        break  # Si todo está OK, salimos del bucle

    if legajo in _alumnos:
        if _alumnos[legajo]["activo"]:
            _alumnos[legajo]["activo"] = False
            print(f"El alumno con ID {legajo} fue dado de baja.")
        else:
            print(f"El alumno con ID {legajo} ya estaba dado de baja.")
    else:
        print(f"No se encontró ningún alumno con ID {legajo}.")

    return _alumnos


def listar_alumnos(alumnos):  #4 COMPLETADO :)
    encontrados = False
    for legajo, datos in alumnos.items():
        if datos["activo"]:
            encontrados = True
            print("-" * 30)
            print(f"Legajo: {legajo}")
            print(f"Nombre: {datos['nombre']} {datos['apellido']}")
            print(f"Email: {datos['email']}")
            print(f"Carrera: {datos['carrera']}")
            print(f"Teléfono 1: {datos['telefonos']['telefono1']}")
            print("-" * 30)
    if not encontrados:
        print("No hay alumnos activos para listar.")
        
#FUNCIONES PARA GESTIONAR LIBROS
def ingresoLibros(libros): #5 remover try y except hasta la proxima entrega
    print("---------------------------")
    print("Ingreso de nuevo libro")
    print("---------------------------")
    copiaLibros = libros.copy()

    nombre = input("Nombre del libro: ").strip()
    editorial = input("Editorial: ").strip()
    categoria = input("Categoría: ").strip()

    while True:
        try:
            stock = int(input("Cantidad en stock: "))
            while stock < 0:
                print("Error!!! Ingrese un numero positivo")
                stock = int(input("Cantidad en stock: "))
            break
        except ValueError:
            print("Por favor, ingrese un número entero.")

    while True:
        try:
            costo = float(input("Costo de garantía: "))
            break
        except ValueError:
            print("Ingrese un número válido (ej: 2500.0).")

    autor1 = input("Autor principal: ").strip()
    autor2 = input("Segundo autor: ").strip()
    autor3 = input("Tercer autor: ").strip()

    # Generación de nuevo ID
    if not copiaLibros:
        nuevo_id = "L0001"
    else:
        ultimo_id = copiaLibros[-1]["IdLibro"]
        numero = int(ultimo_id[1:]) + 1
        nuevo_id = f"L{numero:04d}"


    if stock == 0:
        activo = False
    else:
        activo = True


    libro = {
        "IdLibro": nuevo_id,
        "activo": activo,
        "stock": stock,
        "nombre": nombre,
        "editorial": editorial,
        "categoria": categoria,
        "costoGarantia": costo,
        "autor1": autor1,
        "autor2": autor2,
        "autor3": autor3
  
    }

    print(f"\n El libro {nombre} (ID: {nuevo_id}) fue agregado con éxito.\n")


    # Agregar a la lista
    copiaLibros.append(libro)

    return copiaLibros

def modificar_libro(id_libro, nuevos_datos): #6
    for libro in libros:
        if libro["IdLibro"] == id_libro:
            libro.update(nuevos_datos)
            print(f"Libro {id_libro} modificado exitosamente.")
            return
    print(f"Libro {id_libro} no encontrado.")


def eliminarLibro(libros):  #7 COMPLETADO :)
    idLibro = input("Ingrese el ID del libro que desea desactivar: ")

    if idLibro in libros:
        if libros[idLibro]["activo"]:
            libros[idLibro]["activo"] = False
            print(f"Libro '{libros[idLibro]['nombre']}' con ID {idLibro} fue desactivado correctamente.")
            return 
        else:
            print(f"El libro con ID {idLibro} ya estaba inactivo.")
            return 
    else:
        print(f"No se encontró ningún libro con ID {idLibro}.")
        return


def librosActivos(libros): #8 COMPLETADO :)
    encontrados = False
    for idLibro, datos in libros.items():
        if datos["activo"]:
            encontrados = True
            print(f"ID del Libro: {idLibro}")
            print(f"Nombre: {datos['nombre']}")
            print(f"Editorial: {datos['editorial']}")
            print(f"Categoría: {datos['categoria']}")
            print(f"Stock: {datos['stock']}")
            print(f"Autor 1: {datos['autores']['autor1']}")
            print("-" * 30)

    if not encontrados:
        print("No hay libros activos para listar.")

def buscar_libros_por_autor(libros):           # 9 COMPLETADO :)
    autor_buscado = input("Ingrese el nombre del autor a buscar: ").strip().lower()
    encontrados = False

    for idLibro, datos in libros.items():
        for key in ['autor1', 'autor2', 'autor3']:
            autor = datos["autores"].get(key, "").strip().lower()
            if autor and autor_buscado in autor:
                encontrados = True
                print("-" * 30)
                print(f"ID del Libro: {idLibro}")
                print(f"Nombre: {datos['nombre']}")
                print(f"Editorial: {datos['editorial']}")
                print(f"Categoría: {datos['categoria']}")
                print(f"Stock: {datos['stock']}")
                print(f"Autor 1: {datos['autores']['autor1']}")
                print("-" * 30)
                break  # Evita duplicar si el autor aparece más de una vez en el mismo libro

    if not encontrados:
        print(f"No se encontraron libros para el autor '{autor_buscado}'.")



def buscarLibrosPorCategoria(_libros):      # 10 COMPLETADO :)
    categoria = input("Ingrese la categoría a buscar: ").strip().lower()
    encontrados = False

    for idLibro, datos in _libros.items():
        if datos["activo"] and categoria in datos["categoria"].lower():
            encontrados = True
            print("-" * 30)
            print(f"ID del Libro: {idLibro}")
            print(f"Nombre: {datos['nombre']}")
            print(f"Editorial: {datos['editorial']}")
            print(f"Categoría: {datos['categoria']}")
            print(f"Stock: {datos['stock']}")
            print(f"Autor 1: {datos['autores']['autor1']}")
            print("-" * 30)

    if not encontrados:
        print(f"\nNo se encontraron libros en la categoría '{categoria}'.")

#FUNCIONES PARA GESTIONAR PRESTAMOS

def sumarDias(fecha, dias) :  #Funcion auxiliar para calcular los dias para devolver un prestamo
    resultado = fecha
    for i in range(dias):
        resultado = datetime(
            resultado.year,
            resultado.month,
            resultado.day,
            resultado.hour,
            resultado.minute,
            resultado.second
        )
        resultado += datetime.resolution
        while resultado.day == fecha.day:
            resultado += datetime.resolution
        fecha = resultado
    return resultado
        
def registrarPrestamo(alumnos, libros, prestamos): #Remover try y except hasta la proxima entrega
    print("\n--- Registro de nuevo préstamo ---")

    idAlumno = input("ID del alumno (ej: A0001): ").strip()
    alumno = None
    for a in listaAlumnos:
        if a["IdAlumno"] == idAlumno and a["activo"] == True:
            alumno = a
            break

    if alumno is None:
        print("Alumno no válido o inactivo.")
        return

    idLibro = input("ID del libro (ej: L0001): ").strip()
    libro = None
    for l in listaLibros:
        if l["IdLibro"] == idLibro and l["activo"] == True and l["stock"] > 0:
            libro = l
            break

    if libro is None:
        print("Libro no válido, inactivo o sin stock.")
        return

    try:
        tipoPrestamo = int(input("Tipo de préstamo (1 para semanal, 2 para 15 dias y 3 para 30 dias): ").strip())
        if tipoPrestamo not in [1, 2,3]:
            print("Tipo inválido.")
            return
    except ValueError:
        print("Ingrese un número válido.")
        return

    try:
        costoPrestamo = int(input("Costo del préstamo en pesos: ").strip())
    except ValueError:
        print("Ingrese un valor numérico para el costo.")
        return

    fechaPrestamo = datetime.now()
    if tipoPrestamo == 1:
        diasADevolver = 7
    elif tipoPrestamo==2:
        diasADevolver=15
    else:
        diasADevolver =30
    
    fechaDevolucion = sumarDias(fechaPrestamo, diasADevolver)

    idPrestamo = f'P{fechaPrestamo.strftime("%Y.%m.%d %H.%M.%S")}'
    nuevoPrestamo = {
        "IdPrestamo": idPrestamo,
        "IdAlumno": idAlumno,
        "IdLibro": idLibro,
        "tipoPrestamo": tipoPrestamo,
        "costoPrestamo": costoPrestamo,
        "fechaDevolucion": fechaDevolucion.strftime("%Y.%m.%d %H.%M.%S"),
        "Devuelto":False
    }

    listaPrestamos.append(nuevoPrestamo)
    libro["stock"] -= 1

    print(f"✅ Préstamo registrado correctamente con ID: {idPrestamo}")
    return

def devolverPrestamo(prestamos):
    print("----- REGISTRAR DEVOLUCIÓN -----")
    id_prestamo = input("Ingrese el ID del préstamo (formato AAAA.MM.DD hh.mm.ss): ").strip()

    if id_prestamo in prestamos:
        if prestamos[id_prestamo].get("Devuelto", False):
            print("Este préstamo ya fue registrado como devuelto.")
        else:
            prestamos[id_prestamo]["Devuelto"] = True
            print("La devolución fue registrada correctamente.")
    else:
        print("No se encontró un préstamo con ese ID.")


#-------------------------------

#FUNCIONES PARA INFORMES 

#-------------------------------


def listarPrestamosMesActual(prestamos): #11 COMPLETADO
    tipo_dict = {1: "Semanal", 2: "15 días", 3: "Mensual"}
    hoy = datetime.now()

    print(f"{'Prestamo':<20} {'Alumno':<8} {'Libro':<6} {'TipoPrestamo':<12} {'FechaDevolucion':<20} {'Devuelto':<8} {'PrecioGarantía':>15}")
    print("-" * 100)

    for fecha_str, datos in prestamos.items():
        fecha = datetime.strptime(fecha_str, "%Y.%m.%d %H.%M.%S")
        if fecha.year == hoy.year and fecha.month == hoy.month:
            tipo_texto = tipo_dict.get(datos["tipoPrestamo"], "Desconocido")
            precio = f"{datos['costoPrestamo']:,.2f}"
            print(f"{fecha_str:<20} {datos['IdAlumno']:<8} {datos['IdLibro']:<6} {tipo_texto:<12} {datos['fechaDevolucion']:<20} {str(datos['Devuelto']):<8} {precio:>15}")



def resumen_anual_prestamos_cantidad_tabla(libros, prestamos, año):  #12 COMPLETADO
    """
    Genera un resumen anual de cantidad de préstamos por libro, en formato de tabla mensual.
    """
    meses = [
        "ENE", "FEB", "MAR", "ABR", "MAY", "JUN",
        "JUL", "AGO", "SEP", "OCT", "NOV", "DIC"
    ]
    # Inicializar estructura: {id_libro: [0, 0, ..., 0] (12 meses)}
    resumen = {}
    for id_libro, info in libros.items():
        resumen[id_libro] = [0] * 12

    # Procesar préstamos
    for fecha_prestamo, datos in prestamos.items():
        año_prestamo, mes_prestamo = fecha_prestamo.split('.')[:2]
        if año_prestamo == año:
            id_libro = datos["IdLibro"]
            mes_idx = int(mes_prestamo) - 1  # 0-indexed
            if id_libro in resumen:
                resumen[id_libro][mes_idx] += 1

    # Imprimir encabezado
    print(f"\n{'Producto':<25}", end="")
    for m in meses:
        print(f"{m+'.'+año[-2:]:>9}", end="")
    print()

    # Imprimir filas por libro, con salto de línea entre filas
    for id_libro, valores in resumen.items():
        nombre = libros[id_libro]["nombre"][:23]
        print(f"{nombre:<25}", end="")
        for v in valores:
            print(f"{v:>9}", end="")
        print("\n")  # Salto de línea extra entre filas

    # (Opcional) Totales por mes
    print(f"{'TOTAL':<25}", end="")
    for i in range(12):
        total_mes = sum(resumen[libro][i] for libro in resumen)
        print(f"{total_mes:>9}", end="")
    print("\n")



def resumen_anual_prestamos_pesos_tabla(libros, prestamos, año):   #13 COMPLETADO
    """
    Genera un resumen anual de préstamos por libro en pesos, en formato de tabla mensual.
    """
    meses = [
        "ENE", "FEB", "MAR", "ABR", "MAY", "JUN",
        "JUL", "AGO", "SEP", "OCT", "NOV", "DIC"
    ]
    # Inicializar estructura: {id_libro: [0, 0, ..., 0] (12 meses)}
    resumen = {}
    for id_libro, info in libros.items():
        resumen[id_libro] = [0] * 12

    # Procesar préstamos
    for fecha_prestamo, datos in prestamos.items():
        año_prestamo, mes_prestamo = fecha_prestamo.split('.')[:2]
        if año_prestamo == año:
            id_libro = datos["IdLibro"]
            costo = datos["costoPrestamo"]
            mes_idx = int(mes_prestamo) - 1  # 0-indexed
            if id_libro in resumen:
                resumen[id_libro][mes_idx] += costo

    # Imprimir encabezado
    print(f"\n{'Producto':<25}", end="")
    for m in meses:
        print(f"{m+'.'+año[-2:]:>9}", end="")
    print()

    # Imprimir filas por libro, con salto de línea entre filas
    for id_libro, valores in resumen.items():
        nombre = libros[id_libro]["nombre"][:23]
        print(f"{nombre:<25}", end="")
        for v in valores:
            print(f"{v:>9}", end="")
        print("\n")  # Salto de línea extra entre filas

    # (Opcional) Totales por mes
    print(f"{'TOTAL':<25}", end="")
    for i in range(12):
        total_mes = sum(resumen[libro][i] for libro in resumen)
        print(f"{total_mes:>9}", end="")
    print("\n")


def listarPrestamosAtrasados(prestamos, alumnos):  #14 COMPLETADO
    fechaActual = datetime.now()
    print("Listado de préstamos atrasados al", fechaActual.strftime("%Y-%m-%d %H:%M:%S"))
    print("-" * 55)

    for idPrestamo in prestamos:
        datosPrestamo = prestamos[idPrestamo]
        fechaDevolucion = datetime.strptime(datosPrestamo["fechaDevolucion"], "%Y.%m.%d %H.%M.%S")

        if fechaDevolucion < fechaActual and datosPrestamo.get("Devuelto") == False:
            idAlumno = datosPrestamo["IdAlumno"]
            nombreAlumno = alumnos[idAlumno]["nombre"] + " " + alumnos[idAlumno]["apellido"]
            diasAtraso = (fechaActual - fechaDevolucion).days

            print(f"ID Préstamo: {idPrestamo}")
            print(f"Alumno: {nombreAlumno}")
            print(f"ID Alumno: {idAlumno}")
            print(f"ID Libro: {datosPrestamo['IdLibro']}")
            print(f"Tipo de préstamo: {datosPrestamo['tipoPrestamo']}")
            print(f"Costo del préstamo: ${datosPrestamo['costoPrestamo']}")
            print(f"Fecha de devolución: {datosPrestamo['fechaDevolucion']}")
            print(f"Días de atraso: {diasAtraso}")
            print("-" * 55)
    return
        
        

#----------------------------------------------------------------------------------------------
# CUERPO PRINCIPAL
#----------------------------------------------------------------------------------------------
def main():
    #-------------------------------------------------
    # Inicialización de variables
    #----------------------------------------------------------------------------------------------
    Alumnos = {
    "1001": {"activo": True, "nombre": "Sofía", "apellido": "Martínez", "direccion": "Av. Corrientes 1234", "email": "sofia.martinez@gmail.com", "carrera": "Ingeniería en Sistemas", "telefonos": {"telefono1": "1134567890", "telefono2": "1145678901", "telefono3": "1156789012"}},
    "1002": {"activo": True, "nombre": "Lucas", "apellido": "Fernández", "direccion": "Calle Falsa 123", "email": "lucas.fernandez@gmail.com", "carrera": "Licenciatura en Sistemas", "telefonos": {"telefono1": "1176543210", "telefono2": "", "telefono3": ""}},
    "1003": {"activo": True, "nombre": "María", "apellido": "Gómez", "direccion": "Av. San Juan 456", "email": "maria.gomez@gmail.com", "carrera": "Ingeniería Industrial", "telefonos": {"telefono1": "1133344556", "telefono2": "", "telefono3": ""}},
    "1004": {"activo": True, "nombre": "Tomás", "apellido": "Pérez", "direccion": "Av. Libertador 789", "email": "tomas.perez@gmail.com", "carrera": "Contador Público", "telefonos": {"telefono1": "1155556666", "telefono2": "1177778888", "telefono3": ""}},
    "1005": {"activo": True, "nombre": "Camila", "apellido": "López", "direccion": "Calle Mendoza 234", "email": "camila.lopez@gmail.com", "carrera": "Derecho", "telefonos": {"telefono1": "1166667777", "telefono2": "", "telefono3": ""}},
    "1006": {"activo": True, "nombre": "Mateo", "apellido": "Rodríguez", "direccion": "Calle Salta 100", "email": "mateo.rodriguez@gmail.com", "carrera": "Medicina", "telefonos": {"telefono1": "1188889999", "telefono2": "1199990000", "telefono3": ""}},
    "1007": {"activo": True, "nombre": "Valentina", "apellido": "Díaz", "direccion": "Av. Córdoba 900", "email": "valentina.diaz@gmail.com", "carrera": "Arquitectura", "telefonos": {"telefono1": "1133214455", "telefono2": "", "telefono3": ""}},
    "1008": {"activo": True, "nombre": "Julián", "apellido": "Sánchez", "direccion": "Calle Perú 678", "email": "julian.sanchez@gmail.com", "carrera": "Psicología", "telefonos": {"telefono1": "1122233344", "telefono2": "", "telefono3": ""}},
    "1009": {"activo": True, "nombre": "Martina", "apellido": "Romero", "direccion": "Av. Rivadavia 200", "email": "martina.romero@gmail.com", "carrera": "Diseño Gráfico", "telefonos": {"telefono1": "1165432109", "telefono2": "", "telefono3": ""}},
    "1010": {"activo": True, "nombre": "Benjamín", "apellido": "Ruiz", "direccion": "Calle Tucumán 300", "email": "benjamin.ruiz@gmail.com", "carrera": "Ingeniería Civil", "telefonos": {"telefono1": "1144433221", "telefono2": "", "telefono3": ""}}
}
    
    Prestamos = {
    "2025.06.01 09.15.00": {"IdAlumno": "1001", "IdLibro": "L001", "tipoPrestamo": 1,"costoPrestamo": 150, "fechaDevolucion": "2025.06.08 09.15.00", "Devuelto": True},
    "2025.06.02 14.30.00": {"IdAlumno": "1002", "IdLibro": "L002", "tipoPrestamo": 2,"costoPrestamo": 120, "fechaDevolucion": "2025.06.17 14.30.00", "Devuelto": False},
    "2024.06.02 14.30.00": {"IdAlumno": "1002", "IdLibro": "L002", "tipoPrestamo": 2,"costoPrestamo": 120, "fechaDevolucion": "2025.06.17 14.30.00", "Devuelto": True},
    "2025.06.03 10.00.00": {"IdAlumno": "1003", "IdLibro": "L003", "tipoPrestamo": 3,"costoPrestamo": 200, "fechaDevolucion": "2025.07.03 10.00.00", "Devuelto": False},
    "2025.06.04 11.45.00": {"IdAlumno": "1004", "IdLibro": "L004", "tipoPrestamo": 1,"costoPrestamo": 180, "fechaDevolucion": "2025.06.11 11.45.00", "Devuelto": True},
    "2025.06.05 13.20.00": {"IdAlumno": "1005", "IdLibro": "L005", "tipoPrestamo": 2,"costoPrestamo": 300, "fechaDevolucion": "2025.06.20 13.20.00", "Devuelto": False},
    "2025.06.06 08.10.00": {"IdAlumno": "1006", "IdLibro": "L006", "tipoPrestamo": 3,"costoPrestamo": 450, "fechaDevolucion": "2025.07.06 08.10.00", "Devuelto": False},
    "2025.06.07 15.30.00": {"IdAlumno": "1007", "IdLibro": "L007", "tipoPrestamo": 1,"costoPrestamo": 170, "fechaDevolucion": "2025.06.14 15.30.00", "Devuelto": True},
    "2025.06.08 12.25.00": {"IdAlumno": "1008", "IdLibro": "L008", "tipoPrestamo": 2,"costoPrestamo": 220, "fechaDevolucion": "2025.06.23 12.25.00", "Devuelto": False},
    "2025.06.09 09.00.00": {"IdAlumno": "1009", "IdLibro": "L009", "tipoPrestamo": 3,"costoPrestamo": 600, "fechaDevolucion": "2025.07.09 09.00.00", "Devuelto": False}
}

    
    Libros = {
    "L001": {"activo": True, "stock": 7, "nombre": "Cien Años de Soledad", "editorial": "Sudamericana", "categoria": "Novela", "autores": {"autor1": "Julio Cortázar", "autor2": "", "autor3": ""}},
    "L002": {"activo": True, "stock": 5, "nombre": "1984", "editorial": "Secker & Warburg", "categoria": "Distopía", "autores": {"autor1": "George Orwell", "autor2": "", "autor3": ""}},
    "L003": {"activo": True, "stock": 3, "nombre": "El Principito", "editorial": "Reynal & Hitchcock", "categoria": "Fantasía", "autores": {"autor1": "Antoine de Saint-Exupéry", "autor2": "", "autor3": ""}},
    "L004": {"activo": True, "stock": 4, "nombre": "Don Quijote de la Mancha", "editorial": "Francisco de Robles", "categoria": "Clásico", "autores": {"autor1": "Miguel de Cervantes", "autor2": "", "autor3": ""}},
    "L005": {"activo": True, "stock": 2, "nombre": "La Sombra del Viento", "editorial": "Planeta", "categoria": "Misterio", "autores": {"autor1": "Carlos Ruiz Zafón", "autor2": "", "autor3": ""}},
    "L006": {"activo": True, "stock": 8, "nombre": "Rayuela", "editorial": "Sudamericana", "categoria": "Novela", "autores": {"autor1": "Julio Cortázar", "autor2": "", "autor3": ""}},
    "L007": {"activo": True, "stock": 6, "nombre": "Ficciones", "editorial": "Sur", "categoria": "Cuentos", "autores": {"autor1": "Jorge Luis Borges", "autor2": "", "autor3": ""}},
    "L008": {"activo": True, "stock": 10, "nombre": "Harry Potter y la piedra filosofal", "editorial": "Salamandra", "categoria": "Fantasía", "autores": {"autor1": "J.K. Rowling", "autor2": "", "autor3": ""}},
    "L009": {"activo": True, "stock": 1, "nombre": "Los Juegos del Hambre", "editorial": "Scholastic", "categoria": "Ciencia Ficción", "autores": {"autor1": "Suzanne Collins", "autor2": "", "autor3": ""}},
    "L010": {"activo": True, "stock": 5, "nombre": "Orgullo y Prejuicio", "editorial": "T. Egerton", "categoria": "Romance", "autores": {"autor1": "Jane Austen", "autor2": "", "autor3": ""}}
}




    #-------------------------------------------------
    # Bloque de menú
    #----------------------------------------------------------------------------------------------
    while True:
        while True:
            opciones = 4
            print()
            print("---------------------------")
            print("MENÚ PRINCIPAL")
            print("---------------------------")
            print("[1] Gestión de Alumnos")
            print("[2] Gestión de Libros")
            print("[3] Gestión de Préstamos")
            print("[4] Informes")
            print("---------------------------")
            print("[0] Salir del programa")
            print("---------------------------")
            print()
            
            opcionSubmenu = ""
            opcionMenuPrincipal = input("Seleccione una opción: ")
            if opcionMenuPrincipal in [str(i) for i in range(0, opciones + 1)]: # Sólo continua si se elije una opcion de menú válida
                break
            else:
                input("Opción inválida. Presione ENTER para volver a seleccionar.")
        print()

        if opcionMenuPrincipal == "0": # Opción salir del programa
            exit()

        elif opcionMenuPrincipal == "1":   # Opción 1 del menú principal, accede a la gestion de alumnos
            while True:
                while True:
                    opciones = 4
                    print()
                    print("---------------------------")
                    print("MENÚ PRINCIPAL > MENÚ DE CLIENTES")
                    print("---------------------------")
                    print("[1] Ingresar Alumno")
                    print("[2] Modificar Alumno")
                    print("[3] Eliminar Alumno")
                    print("[4] Listado de Alumnos Activos")
                    print("---------------------------")
                    print("[0] Volver al menú anterior")
                    print("---------------------------")
                    print()
                    
                    opcionSubmenu = input("Seleccione una opción: ")
                    if opcionSubmenu in [str(i) for i in range(0, opciones + 1)]: # Sólo continua si se elije una opcion de menú válida
                        break
                    else:
                        input("Opción inválida. Presione ENTER para volver a seleccionar.")
                print()

                if opcionSubmenu == "0": # Opción salir del submenú
                    break # No sale del programa, sino que vuelve al menú anterior
                
                elif opcionSubmenu == "1":   # Opción 1 del submenú, permite cargar un alumno
                    ingresoAlumno(Alumnos)
                    
                elif opcionSubmenu == "2":   # Opción 2 del submenú, permite modificar la informacion de un alumno
                    modificar_alumno(id_alumno, nuevos_datos)
                
                elif opcionSubmenu == "3":   # Opción 3 del submenú, permite realizar un borrado logico de un alumno
                    
                    eliminarAlumno(Alumnos)
                
                elif opcionSubmenu == "4":   # Opción 4 del submenú, muestra un listado de los alumnos activos
                    listar_alumnos(Alumnos)

                input("\nPresione ENTER para volver al menú.") # Pausa entre opciones
                print("\n\n")


        elif opcionMenuPrincipal == "2":   # Opción 2 del menú principal, accede a la gestion de libros
            while True:
                while True:
                    opciones = 6
                    print()
                    print("---------------------------")
                    print("MENÚ PRINCIPAL > MENÚ DE LIBROS")
                    print("---------------------------")
                    print("[1] Ingresar Libro")
                    print("[2] Modificar Libro")
                    print("[3] Eliminar Libro")
                    print("[4] Listado de Libros Activos")
                    print("[5] Listado de Libros por Autor")
                    print("[6] Listado de Libros por Categoría")
                    print("---------------------------")
                    print("[0] Volver al menú anterior")
                    print("---------------------------")
                    print()
                    
                    opcionSubmenu = input("Seleccione una opción: ")
                    if opcionSubmenu in [str(i) for i in range(0, opciones + 1)]: # Sólo continua si se elije una opcion de menú válida
                        break
                    else:
                        input("Opción inválida. Presione ENTER para volver a seleccionar.")
                print()

                if opcionSubmenu == "0": # Opción salir del submenú
                    break # No sale del programa, sino que vuelve al menú anterior
                
                elif opcionSubmenu == "1":   # Opción 1 del submenú, permite ingresar un nuevo libro
                    ingresoLibros(Libros)
                    
                elif opcionSubmenu == "2":   # Opción 2 del submenú, accede a modificar libro
                    modificar_libro(id_libro, nuevos_datos)
                
                elif opcionSubmenu == "3":   # Opción 3 del submenú, permite eliminar logicamente un libro
                    eliminarLibro(Libros)
                
                elif opcionSubmenu == "4":   # Opción 4 del submenú, muestra un listado de los libros activos
                    librosActivos(Libros)
                    
                elif opcionSubmenu == "5":   # Opción 5 el submenú, muestra un listado de libros segun su autor
                    buscar_libros_por_autor(Libros)
                
                elif opcionSubmenu == "6":   # Opción 6 del submenú, muestra un listado de libros segun su categoria
                    buscarLibrosPorCategoria(Libros)
                    

                input("\nPresione ENTER para volver al menú.") # Pausa entre opciones
                print("\n\n")
        
        elif opcionMenuPrincipal == "3":   # Opción 3 del menú principal, accede a registrar prestamo
            while True:
                while True:
                    opciones = 2
                    print()
                    print("---------------------------")
                    print("MENÚ PRINCIPAL > INFORMES")
                    print("---------------------------")
                    print("[1] Registrar Prestamo")
                    print("[2] Devolver Prestamo")
                    print("---------------------------")
                    print("[0] Volver al menú anterior")
                    print("---------------------------")
                    print()
                    opcionSubmenu = input("Seleccione una opción: ")
                    if opcionSubmenu in [str(i) for i in range(0, opciones + 1)]: # Sólo continua si se elije una opcion de menú válida
                        break
                    else:
                        input("Opción inválida. Presione ENTER para volver a seleccionar.")
                print()

                if opcionSubmenu == "0": # Opción salir del submenú
                    break # No sale del programa, sino que vuelve al menú anterior
                
                elif opcionSubmenu == "1":   # Opción 1 del submenú
                    registrarPrestamo(Alumnos,Libros,Prestamos)
                elif opcionSubmenu == "2":   # Opción 2 del submenú
                    devolverPrestamo(Prestamos)
                

        if opcionSubmenu != "0": # Pausa entre opciones. No la realiza si se vuelve de un submenú
            input("\nPresione ENTER para volver al menú.")
            print("\n\n")
        
        elif opcionMenuPrincipal == "4":   # Opción 4 del menú principal, accede a los informes
            while True:
                while True:
                    opciones = 5
                    print()
                    print("---------------------------")
                    print("MENÚ PRINCIPAL > INFORMES")
                    print("---------------------------")
                    print("[1] Préstamos del Mes")
                    print("[2] Resumen Anual de Préstamos por Libro (cantidades)")
                    print("[3] Resumen Anual de Préstamos por Libro (pesos)")
                    print("[4] Resumen de Préstamos Atrasados")
                    print("[5] Resumen Anual de Préstamos")
                    print("---------------------------")
                    print("[0] Volver al menú anterior")
                    print("---------------------------")
                    print()
                    opcionSubmenu = input("Seleccione una opción: ")
                    if opcionSubmenu in [str(i) for i in range(0, opciones + 1)]: # Sólo continua si se elije una opcion de menú válida
                        break
                    else:
                        input("Opción inválida. Presione ENTER para volver a seleccionar.")
                print()

                if opcionSubmenu == "0": # Opción salir del submenú
                    break # No sale del programa, sino que vuelve al menú anterior
                
                elif opcionSubmenu == "1":   # Opción 1 del submenú
                    listarPrestamosMesActual(Prestamos)
                    
                elif opcionSubmenu == "2":   # Opción 2 del submenú
                    año = input("Ingrese el año a realizar el resumen: ")
                    resumen_anual_prestamos_cantidad_tabla(Libros, Prestamos, año)
                
                elif opcionSubmenu == "3":   # Opción 3 del submenú
                    año = input("Ingrese el año a realizar el resumen: ")
                    resumen_anual_prestamos_pesos(Libros, Prestamos, año)
                
                elif opcionSubmenu == "4":   # Opción 4 del submenú
                    listarPrestamosAtrasados(Prestamos, Alumnos)
        #elif opcionMenuPrincipal == "5":   # Opción 5 del menú principal
        #    ...

        if opcionSubmenu != "0": # Pausa entre opciones. No la realiza si se vuelve de un submenú
            input("\nPresione ENTER para volver al menú.")
            print("\n\n")


# Punto de entrada al programa
main()
